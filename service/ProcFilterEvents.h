//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level; 
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{

    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Vista.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider ProcFilter Event Count 24
//+
EXTERN_C __declspec(selectany) const GUID ETW_PROCFILTER_PROVIDER = {0xaaf28f4b, 0xe47b, 0x4200, {0xab, 0x5d, 0xe1, 0xd3, 0xf1, 0x8a, 0xd0, 0xfe}};

//
// Channel
//
#define ETW_PROCFILTER_PROVIDER_CHANNEL_Application 0x9
#define ETW_PROCFILTER_PROVIDER_CHANNEL_Security 0xa

//
// Opcodes
//
#define MATCH_OPCODE 0xa
#define PERIODICSCANSTARTED_OPCODE 0xb
#define PERIODICSCANFINISHED_OPCODE 0xc
#define EXECUTIONBLOCKED_OPCODE 0xd
#define EXECUTIONLOGGED_OPCODE 0xe
#define FILEQUARANTINED_OPCODE 0xf
#define RULECOMPILATIONFAILED_OPCODE 0x10
#define FATALERROR_OPCODE 0x11
#define SCANPROCESSFAILED_OPCODE 0x12
#define SCANFILEFAILED_OPCODE 0x13
#define EXITINGPROCESSSCANMATCHEDBLOCKEDRULE_OPCODE 0x14
#define EXITINGPROCESSSCANMATCHEDLOGGEDRULE_OPCODE 0x15
#define RUNNINGPROCESSMATCHEDBLOCKEDRULE_OPCODE 0x16
#define RUNNINGPROCESSMATCHEDLOGGEDRULE_OPCODE 0x17
#define PROCESSTERMINATED_OPCODE 0x18
#define SERVICESTARTED_OPCODE 0x19
#define SERVICESTOPPED_OPCODE 0x1a
#define PLUGINLOG_OPCODE 0x1b
#define LOADEDIMAGEMATCHEDBLOCKEDRULE_OPCODE 0x1c
#define LOADEDIMAGEMATCHEDLOGGEDRULE_OPCODE 0x1d
#define WARNING_OPCODE 0x1e
#define NOTICE_OPCODE 0x1f
#define PLUGINWARNING_OPCODE 0x20
#define PLUGINCRITICAL_OPCODE 0x21
//
// Keyword
//
#define YARAMATCH_KEYWORD 0x1
#define PERIODICSCANSTARTED_KEYWORD 0x2
#define PERIODICSCANFINISHED_KEYWORD 0x4
#define EXECUTIONBLOCKED_KEYWORD 0x8
#define EXECUTIONLOGGED_KEYWORD 0x10
#define FILEQUARANTINED_KEYWORD 0x20
#define RULECOMPILATIONFAILED_KEYWORD 0x40
#define FATALERROR_KEYWORD 0x80
#define SCANPROCESSFAILED_KEYWORD 0x100
#define SCANFILEFAILED_KEYWORD 0x200
#define EXITINGPROCESSSCANMATCHEDBLOCKEDRULE_KEYWORD 0x400
#define EXITINGPROCESSSCANMATCHEDLOGGEDRULE_KEYWORD 0x800
#define RUNNINGPROCESSMATCHEDLOGGEDRULE_KEYWORD 0x1000
#define RUNNINGPROCESSMATCHEDBLOCKEDRULE_KEYWORD 0x2000
#define PROCESSTERMINATED_KEYWORD 0x8000
#define SERVICESTARTED_KEYWORD 0x10000
#define SERVICESTOPPED_KEYWORD 0x20000
#define PLUGINLOG_KEYWORD 0x80000
#define LOADEDIMAGEMATCHEDBLOCKEDRULE_KEYWORD 0x100000
#define LOADEDIMAGEMATCHEDLOGGEDRULE_KEYWORD 0x200000
#define WARNING_KEYWORD 0x400000
#define NOTICE_KEYWORD 0x800000
#define PLUGINWARNING_KEYWORD 0x1000000
#define PLUGINCRITICAL_KEYWORD 0x2000000

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR MATCH_FOUND = {0x1, 0x1, 0x9, 0x4, 0xa, 0x0, 0x8000000000000001};
#define MATCH_FOUND_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PERIODIC_SCAN_STARTED = {0x2, 0x1, 0x9, 0x4, 0xb, 0x0, 0x8000000000000002};
#define PERIODIC_SCAN_STARTED_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PERIODIC_SCAN_FINISHED = {0x3, 0x1, 0x9, 0x4, 0xc, 0x0, 0x8000000000000004};
#define PERIODIC_SCAN_FINISHED_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EXECUTION_BLOCKED = {0x4, 0x0, 0x9, 0x1, 0xd, 0x0, 0x8000000000000008};
#define EXECUTION_BLOCKED_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EXECUTION_LOGGED = {0x5, 0x0, 0x9, 0x4, 0xe, 0x0, 0x8000000000000010};
#define EXECUTION_LOGGED_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FILE_QUARANTINED = {0x6, 0x0, 0x9, 0x3, 0xf, 0x0, 0x8000000000000020};
#define FILE_QUARANTINED_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RULE_COMPILATION_FAILED = {0x7, 0x0, 0x9, 0x2, 0x10, 0x0, 0x8000000000000040};
#define RULE_COMPILATION_FAILED_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FATAL_ERROR = {0x8, 0x0, 0x9, 0x1, 0x11, 0x0, 0x8000000000000080};
#define FATAL_ERROR_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SCAN_PROCESS_FAILED = {0x9, 0x0, 0x9, 0x3, 0x12, 0x0, 0x8000000000000100};
#define SCAN_PROCESS_FAILED_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SCAN_FILE_FAILED = {0xa, 0x0, 0x9, 0x3, 0x13, 0x0, 0x8000000000000200};
#define SCAN_FILE_FAILED_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EXITING_PROCESS_SCAN_MATCHED_BLOCKED_RULE = {0xb, 0x0, 0x9, 0x1, 0x14, 0x0, 0x8000000000000400};
#define EXITING_PROCESS_SCAN_MATCHED_BLOCKED_RULE_value 0xb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR EXITING_PROCESS_SCAN_MATCHED_LOGGED_RULE = {0xc, 0x0, 0x9, 0x4, 0x15, 0x0, 0x8000000000000800};
#define EXITING_PROCESS_SCAN_MATCHED_LOGGED_RULE_value 0xc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RUNNING_PROCESS_MATCHED_BLOCKED_RULE = {0xd, 0x0, 0x9, 0x1, 0x16, 0x0, 0x8000000000001000};
#define RUNNING_PROCESS_MATCHED_BLOCKED_RULE_value 0xd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RUNNING_PROCESS_MATCHED_LOGGED_RULE = {0xe, 0x0, 0x9, 0x4, 0x17, 0x0, 0x8000000000002000};
#define RUNNING_PROCESS_MATCHED_LOGGED_RULE_value 0xe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PROCESS_TERMINATED = {0xf, 0x0, 0x9, 0x1, 0x18, 0x0, 0x8000000000008000};
#define PROCESS_TERMINATED_value 0xf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PROCFILTERSERVICE_STARTED = {0x10, 0x0, 0x9, 0x4, 0x19, 0x0, 0x8000000000010000};
#define PROCFILTERSERVICE_STARTED_value 0x10
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PROCFILTERSERVICE_STOPPED = {0x11, 0x0, 0x9, 0x4, 0x1a, 0x0, 0x8000000000020000};
#define PROCFILTERSERVICE_STOPPED_value 0x11
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PLUGIN_LOG = {0x12, 0x0, 0x9, 0x4, 0x1b, 0x0, 0x8000000000080000};
#define PLUGIN_LOG_value 0x12
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LOADED_IMAGE_BLOCKED = {0x13, 0x0, 0x9, 0x1, 0x1c, 0x0, 0x8000000000100000};
#define LOADED_IMAGE_BLOCKED_value 0x13
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR LOADED_IMAGE_LOGGED = {0x14, 0x0, 0x9, 0x4, 0x1d, 0x0, 0x8000000000200000};
#define LOADED_IMAGE_LOGGED_value 0x14
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WARNING = {0x15, 0x0, 0x9, 0x3, 0x1e, 0x0, 0x8000000000400000};
#define WARNING_value 0x15
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR NOTICE = {0x16, 0x0, 0x9, 0x4, 0x1f, 0x0, 0x8000000000800000};
#define NOTICE_value 0x16
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PLUGIN_WARNING = {0x17, 0x0, 0x9, 0x3, 0x20, 0x0, 0x8000000001000000};
#define PLUGIN_WARNING_value 0x17
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR PLUGIN_CRITICAL = {0x18, 0x0, 0x9, 0x1, 0x21, 0x0, 0x8000000002000000};
#define PLUGIN_CRITICAL_value 0x18

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG ProcFilterEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG ProcFilterKeywords[24] = {0x8000000000000001, 0x8000000000000002, 0x8000000000000004, 0x8000000000000008, 0x8000000000000010, 0x8000000000000020, 0x8000000000000040, 0x8000000000000080, 0x8000000000000100, 0x8000000000000200, 0x8000000000000400, 0x8000000000000800, 0x8000000000001000, 0x8000000000002000, 0x8000000000008000, 0x8000000000010000, 0x8000000000020000, 0x8000000000080000, 0x8000000000100000, 0x8000000000200000, 0x8000000000400000, 0x8000000000800000, 0x8000000001000000, 0x8000000002000000};
EXTERN_C __declspec(selectany) const UCHAR ProcFilterLevels[24] = {4, 4, 4, 1, 4, 3, 2, 1, 3, 3, 1, 4, 1, 4, 1, 4, 4, 4, 1, 4, 3, 4, 3, 1};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT ETW_PROCFILTER_PROVIDER_Context = {0, 0, 0, 0, 0, 0, 0, 0, 24, ProcFilterEnableBits, ProcFilterKeywords, ProcFilterLevels};

EXTERN_C __declspec(selectany) REGHANDLE ProcFilterHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterProcFilter
#define EventRegisterProcFilter() McGenEventRegister(&ETW_PROCFILTER_PROVIDER, McGenControlCallbackV2, &ETW_PROCFILTER_PROVIDER_Context, &ProcFilterHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterProcFilter
#define EventUnregisterProcFilter() McGenEventUnregister(&ProcFilterHandle) 
#endif

//
// Enablement check macro for MATCH_FOUND
//

#define EventEnabledMATCH_FOUND() ((ProcFilterEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for MATCH_FOUND
//
#define EventWriteMATCH_FOUND(ProcessName, ProcessId, ImagePath, Matches)\
        EventEnabledMATCH_FOUND() ?\
        Template_zxzz(ProcFilterHandle, &MATCH_FOUND, ProcessName, ProcessId, ImagePath, Matches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PERIODIC_SCAN_STARTED
//

#define EventEnabledPERIODIC_SCAN_STARTED() ((ProcFilterEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for PERIODIC_SCAN_STARTED
//
#define EventWritePERIODIC_SCAN_STARTED()\
        EventEnabledPERIODIC_SCAN_STARTED() ?\
        TemplateEventDescriptor(ProcFilterHandle, &PERIODIC_SCAN_STARTED)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PERIODIC_SCAN_FINISHED
//

#define EventEnabledPERIODIC_SCAN_FINISHED() ((ProcFilterEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for PERIODIC_SCAN_FINISHED
//
#define EventWritePERIODIC_SCAN_FINISHED()\
        EventEnabledPERIODIC_SCAN_FINISHED() ?\
        TemplateEventDescriptor(ProcFilterHandle, &PERIODIC_SCAN_FINISHED)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EXECUTION_BLOCKED
//

#define EventEnabledEXECUTION_BLOCKED() ((ProcFilterEnableBits[0] & 0x00000008) != 0)

//
// Event Macro for EXECUTION_BLOCKED
//
#define EventWriteEXECUTION_BLOCKED(ProcessId, FileName, FileMatches, MemoryMatches)\
        EventEnabledEXECUTION_BLOCKED() ?\
        Template_qzzz(ProcFilterHandle, &EXECUTION_BLOCKED, ProcessId, FileName, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EXECUTION_LOGGED
//

#define EventEnabledEXECUTION_LOGGED() ((ProcFilterEnableBits[0] & 0x00000010) != 0)

//
// Event Macro for EXECUTION_LOGGED
//
#define EventWriteEXECUTION_LOGGED(ProcessId, FileName, FileMatches, MemoryMatches)\
        EventEnabledEXECUTION_LOGGED() ?\
        Template_qzzz(ProcFilterHandle, &EXECUTION_LOGGED, ProcessId, FileName, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FILE_QUARANTINED
//

#define EventEnabledFILE_QUARANTINED() ((ProcFilterEnableBits[0] & 0x00000020) != 0)

//
// Event Macro for FILE_QUARANTINED
//
#define EventWriteFILE_QUARANTINED(ProcessId, FileName, Sha1Hash, FileMatches, MemoryMatches)\
        EventEnabledFILE_QUARANTINED() ?\
        Template_qzszz(ProcFilterHandle, &FILE_QUARANTINED, ProcessId, FileName, Sha1Hash, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for RULE_COMPILATION_FAILED
//

#define EventEnabledRULE_COMPILATION_FAILED() ((ProcFilterEnableBits[0] & 0x00000040) != 0)

//
// Event Macro for RULE_COMPILATION_FAILED
//
#define EventWriteRULE_COMPILATION_FAILED(FileName, Error)\
        EventEnabledRULE_COMPILATION_FAILED() ?\
        Template_zz(ProcFilterHandle, &RULE_COMPILATION_FAILED, FileName, Error)\
        : ERROR_SUCCESS\

//
// Enablement check macro for FATAL_ERROR
//

#define EventEnabledFATAL_ERROR() ((ProcFilterEnableBits[0] & 0x00000080) != 0)

//
// Event Macro for FATAL_ERROR
//
#define EventWriteFATAL_ERROR(Error)\
        EventEnabledFATAL_ERROR() ?\
        Template_s(ProcFilterHandle, &FATAL_ERROR, Error)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SCAN_PROCESS_FAILED
//

#define EventEnabledSCAN_PROCESS_FAILED() ((ProcFilterEnableBits[0] & 0x00000100) != 0)

//
// Event Macro for SCAN_PROCESS_FAILED
//
#define EventWriteSCAN_PROCESS_FAILED(ProcessId, FileName, Error)\
        EventEnabledSCAN_PROCESS_FAILED() ?\
        Template_qzz(ProcFilterHandle, &SCAN_PROCESS_FAILED, ProcessId, FileName, Error)\
        : ERROR_SUCCESS\

//
// Enablement check macro for SCAN_FILE_FAILED
//

#define EventEnabledSCAN_FILE_FAILED() ((ProcFilterEnableBits[0] & 0x00000200) != 0)

//
// Event Macro for SCAN_FILE_FAILED
//
#define EventWriteSCAN_FILE_FAILED(ProcessId, FileName, Error)\
        EventEnabledSCAN_FILE_FAILED() ?\
        Template_qzz(ProcFilterHandle, &SCAN_FILE_FAILED, ProcessId, FileName, Error)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EXITING_PROCESS_SCAN_MATCHED_BLOCKED_RULE
//

#define EventEnabledEXITING_PROCESS_SCAN_MATCHED_BLOCKED_RULE() ((ProcFilterEnableBits[0] & 0x00000400) != 0)

//
// Event Macro for EXITING_PROCESS_SCAN_MATCHED_BLOCKED_RULE
//
#define EventWriteEXITING_PROCESS_SCAN_MATCHED_BLOCKED_RULE(ProcessId, FileName, FileMatches, MemoryMatches)\
        EventEnabledEXITING_PROCESS_SCAN_MATCHED_BLOCKED_RULE() ?\
        Template_qzzz(ProcFilterHandle, &EXITING_PROCESS_SCAN_MATCHED_BLOCKED_RULE, ProcessId, FileName, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for EXITING_PROCESS_SCAN_MATCHED_LOGGED_RULE
//

#define EventEnabledEXITING_PROCESS_SCAN_MATCHED_LOGGED_RULE() ((ProcFilterEnableBits[0] & 0x00000800) != 0)

//
// Event Macro for EXITING_PROCESS_SCAN_MATCHED_LOGGED_RULE
//
#define EventWriteEXITING_PROCESS_SCAN_MATCHED_LOGGED_RULE(ProcessId, FileName, FileMatches, MemoryMatches)\
        EventEnabledEXITING_PROCESS_SCAN_MATCHED_LOGGED_RULE() ?\
        Template_qzzz(ProcFilterHandle, &EXITING_PROCESS_SCAN_MATCHED_LOGGED_RULE, ProcessId, FileName, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for RUNNING_PROCESS_MATCHED_BLOCKED_RULE
//

#define EventEnabledRUNNING_PROCESS_MATCHED_BLOCKED_RULE() ((ProcFilterEnableBits[0] & 0x00001000) != 0)

//
// Event Macro for RUNNING_PROCESS_MATCHED_BLOCKED_RULE
//
#define EventWriteRUNNING_PROCESS_MATCHED_BLOCKED_RULE(ProcessId, FileName, FileMatches, MemoryMatches)\
        EventEnabledRUNNING_PROCESS_MATCHED_BLOCKED_RULE() ?\
        Template_qzzz(ProcFilterHandle, &RUNNING_PROCESS_MATCHED_BLOCKED_RULE, ProcessId, FileName, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for RUNNING_PROCESS_MATCHED_LOGGED_RULE
//

#define EventEnabledRUNNING_PROCESS_MATCHED_LOGGED_RULE() ((ProcFilterEnableBits[0] & 0x00002000) != 0)

//
// Event Macro for RUNNING_PROCESS_MATCHED_LOGGED_RULE
//
#define EventWriteRUNNING_PROCESS_MATCHED_LOGGED_RULE(ProcessId, FileName, FileMatches, MemoryMatches)\
        EventEnabledRUNNING_PROCESS_MATCHED_LOGGED_RULE() ?\
        Template_qzzz(ProcFilterHandle, &RUNNING_PROCESS_MATCHED_LOGGED_RULE, ProcessId, FileName, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PROCESS_TERMINATED
//

#define EventEnabledPROCESS_TERMINATED() ((ProcFilterEnableBits[0] & 0x00004000) != 0)

//
// Event Macro for PROCESS_TERMINATED
//
#define EventWritePROCESS_TERMINATED(ProcessId, FileName, FileMatches, MemoryMatches)\
        EventEnabledPROCESS_TERMINATED() ?\
        Template_qzzz(ProcFilterHandle, &PROCESS_TERMINATED, ProcessId, FileName, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PROCFILTERSERVICE_STARTED
//

#define EventEnabledPROCFILTERSERVICE_STARTED() ((ProcFilterEnableBits[0] & 0x00008000) != 0)

//
// Event Macro for PROCFILTERSERVICE_STARTED
//
#define EventWritePROCFILTERSERVICE_STARTED()\
        EventEnabledPROCFILTERSERVICE_STARTED() ?\
        TemplateEventDescriptor(ProcFilterHandle, &PROCFILTERSERVICE_STARTED)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PROCFILTERSERVICE_STOPPED
//

#define EventEnabledPROCFILTERSERVICE_STOPPED() ((ProcFilterEnableBits[0] & 0x00010000) != 0)

//
// Event Macro for PROCFILTERSERVICE_STOPPED
//
#define EventWritePROCFILTERSERVICE_STOPPED()\
        EventEnabledPROCFILTERSERVICE_STOPPED() ?\
        TemplateEventDescriptor(ProcFilterHandle, &PROCFILTERSERVICE_STOPPED)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PLUGIN_LOG
//

#define EventEnabledPLUGIN_LOG() ((ProcFilterEnableBits[0] & 0x00020000) != 0)

//
// Event Macro for PLUGIN_LOG
//
#define EventWritePLUGIN_LOG(PluginName, String)\
        EventEnabledPLUGIN_LOG() ?\
        Template_zs(ProcFilterHandle, &PLUGIN_LOG, PluginName, String)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LOADED_IMAGE_BLOCKED
//

#define EventEnabledLOADED_IMAGE_BLOCKED() ((ProcFilterEnableBits[0] & 0x00040000) != 0)

//
// Event Macro for LOADED_IMAGE_BLOCKED
//
#define EventWriteLOADED_IMAGE_BLOCKED(ProcessId, FileName, ImageName, FileMatches, MemoryMatches)\
        EventEnabledLOADED_IMAGE_BLOCKED() ?\
        Template_qzzzz(ProcFilterHandle, &LOADED_IMAGE_BLOCKED, ProcessId, FileName, ImageName, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for LOADED_IMAGE_LOGGED
//

#define EventEnabledLOADED_IMAGE_LOGGED() ((ProcFilterEnableBits[0] & 0x00080000) != 0)

//
// Event Macro for LOADED_IMAGE_LOGGED
//
#define EventWriteLOADED_IMAGE_LOGGED(ProcessId, FileName, ImageName, FileMatches, MemoryMatches)\
        EventEnabledLOADED_IMAGE_LOGGED() ?\
        Template_qzzzz(ProcFilterHandle, &LOADED_IMAGE_LOGGED, ProcessId, FileName, ImageName, FileMatches, MemoryMatches)\
        : ERROR_SUCCESS\

//
// Enablement check macro for WARNING
//

#define EventEnabledWARNING() ((ProcFilterEnableBits[0] & 0x00100000) != 0)

//
// Event Macro for WARNING
//
#define EventWriteWARNING(Warning)\
        EventEnabledWARNING() ?\
        Template_z(ProcFilterHandle, &WARNING, Warning)\
        : ERROR_SUCCESS\

//
// Enablement check macro for NOTICE
//

#define EventEnabledNOTICE() ((ProcFilterEnableBits[0] & 0x00200000) != 0)

//
// Event Macro for NOTICE
//
#define EventWriteNOTICE(Message)\
        EventEnabledNOTICE() ?\
        Template_z(ProcFilterHandle, &NOTICE, Message)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PLUGIN_WARNING
//

#define EventEnabledPLUGIN_WARNING() ((ProcFilterEnableBits[0] & 0x00400000) != 0)

//
// Event Macro for PLUGIN_WARNING
//
#define EventWritePLUGIN_WARNING(PluginName, String)\
        EventEnabledPLUGIN_WARNING() ?\
        Template_zs(ProcFilterHandle, &PLUGIN_WARNING, PluginName, String)\
        : ERROR_SUCCESS\

//
// Enablement check macro for PLUGIN_CRITICAL
//

#define EventEnabledPLUGIN_CRITICAL() ((ProcFilterEnableBits[0] & 0x00800000) != 0)

//
// Event Macro for PLUGIN_CRITICAL
//
#define EventWritePLUGIN_CRITICAL(PluginName, String)\
        EventEnabledPLUGIN_CRITICAL() ?\
        Template_zs(ProcFilterHandle, &PLUGIN_CRITICAL, PluginName, String)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions 
//
//
//Template from manifest : MatchFound
//
#ifndef Template_zxzz_def
#define Template_zxzz_def
ETW_INLINE
ULONG
Template_zxzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_ unsigned __int64  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_opt_ PCWSTR  _Arg3
    )
{
#define ARGUMENT_COUNT_zxzz 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zxzz];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(unsigned __int64)  );

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zxzz, EventData);
}
#endif

//
//Template from manifest : PeriodicScanStarted
//
#ifndef TemplateEventDescriptor_def
#define TemplateEventDescriptor_def


ETW_INLINE
ULONG
TemplateEventDescriptor(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor
    )
{
    return EventWrite(RegHandle, Descriptor, 0, NULL);
}
#endif

//
//Template from manifest : ExecutionBlocked
//
#ifndef Template_qzzz_def
#define Template_qzzz_def
ETW_INLINE
ULONG
Template_qzzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_opt_ PCWSTR  _Arg3
    )
{
#define ARGUMENT_COUNT_qzzz 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzzz, EventData);
}
#endif

//
//Template from manifest : FileQuarantined
//
#ifndef Template_qzszz_def
#define Template_qzszz_def
ETW_INLINE
ULONG
Template_qzszz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ LPCSTR  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_opt_ PCWSTR  _Arg4
    )
{
#define ARGUMENT_COUNT_qzszz 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzszz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzszz, EventData);
}
#endif

//
//Template from manifest : RuleCompilationFailed
//
#ifndef Template_zz_def
#define Template_zz_def
ETW_INLINE
ULONG
Template_zz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1
    )
{
#define ARGUMENT_COUNT_zz 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zz];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zz, EventData);
}
#endif

//
//Template from manifest : FatalError
//
#ifndef Template_s_def
#define Template_s_def
ETW_INLINE
ULONG
Template_s(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCSTR  _Arg0
    )
{
#define ARGUMENT_COUNT_s 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_s];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_s, EventData);
}
#endif

//
//Template from manifest : ScanProcessFailed
//
#ifndef Template_qzz_def
#define Template_qzz_def
ETW_INLINE
ULONG
Template_qzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_qzz 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzz, EventData);
}
#endif

//
//Template from manifest : PluginLog
//
#ifndef Template_zs_def
#define Template_zs_def
ETW_INLINE
ULONG
Template_zs(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ LPCSTR  _Arg1
    )
{
#define ARGUMENT_COUNT_zs 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zs];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(CHAR)) : (ULONG)sizeof("NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zs, EventData);
}
#endif

//
//Template from manifest : LoadedImageMatchedBlockedRule
//
#ifndef Template_qzzzz_def
#define Template_qzzzz_def
ETW_INLINE
ULONG
Template_qzzzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_opt_ PCWSTR  _Arg3,
    _In_opt_ PCWSTR  _Arg4
    )
{
#define ARGUMENT_COUNT_qzzzz 5

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzzzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[4], 
                        (_Arg4 != NULL) ? _Arg4 : L"NULL",
                        (_Arg4 != NULL) ? (ULONG)((wcslen(_Arg4) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzzzz, EventData);
}
#endif

//
//Template from manifest : Warning
//
#ifndef Template_z_def
#define Template_z_def
ETW_INLINE
ULONG
Template_z(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0
    )
{
#define ARGUMENT_COUNT_z 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_z];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_z, EventData);
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_ProcFilter_event_1_message       0x00000001L
#define MSG_ProcFilter_event_2_message       0x00000002L
#define MSG_ProcFilter_event_3_message       0x00000003L
#define MSG_ProcFilter_event_4_message       0x00000004L
#define MSG_ProcFilter_event_5_message       0x00000005L
#define MSG_ProcFilter_event_6_message       0x00000006L
#define MSG_ProcFilter_event_7_message       0x00000007L
#define MSG_ProcFilter_event_8_message       0x00000008L
#define MSG_ProcFilter_event_9_message       0x00000009L
#define MSG_ProcFilter_event_10_message      0x0000000AL
#define MSG_ProcFilter_event_11_message      0x0000000BL
#define MSG_ProcFilter_event_12_message      0x0000000CL
#define MSG_ProcFilter_event_13_message      0x0000000DL
#define MSG_ProcFilter_event_14_message      0x0000000EL
#define MSG_ProcFilter_event_15_message      0x0000000FL
#define MSG_ProcFilter_event_16_message      0x00000010L
#define MSG_ProcFilter_event_17_message      0x00000011L
#define MSG_ProcFilter_event_18_message      0x00000012L
#define MSG_ProcFilter_event_0_message       0x00000013L
#define MSG_ProcFilter_event_20_message      0x00000014L
#define MSG_ProcFilter_event_21_message      0x00000015L
#define MSG_ProcFilter_event_22_message      0x00000016L
#define MSG_ProcFilter_event_23_message      0x00000017L
#define MSG_ProcFilter_event_24_message      0x00000018L
#define MSG_ProcFilter_keyword_YARAMATCH_KEYWORD_message 0x10000001L
#define MSG_ProcFilter_keyword_PERIODICSCANSTARTED_KEYWORD_message 0x10000002L
#define MSG_ProcFilter_keyword_PERIODICSCANFINISHED_KEYWORD_message 0x10000003L
#define MSG_ProcFilter_keyword_EXECUTIONBLOCKED_KEYWORD_message 0x10000004L
#define MSG_ProcFilter_keyword_EXECUTIONLOGGED_KEYWORD_message 0x10000005L
#define MSG_ProcFilter_keyword_FILEQUARANTINED_KEYWORD_message 0x10000006L
#define MSG_ProcFilter_keyword_RULECOMPILATIONFAILED_KEYWORD_message 0x10000007L
#define MSG_ProcFilter_keyword_FATALERROR_KEYWORD_message 0x10000008L
#define MSG_ProcFilter_keyword_SCANPROCESSFAILED_KEYWORD_message 0x10000009L
#define MSG_ProcFilter_keyword_SCANFILEFAILED_KEYWORD_message 0x1000000AL
#define MSG_ProcFilter_keyword_EXITINGPROCESSSCANMATCHEDBLOCKEDRULE_KEYWORD_message 0x1000000BL
#define MSG_ProcFilter_keyword_EXITINGPROCESSSCANMATCHEDLOGGEDRULE_KEYWORD_message 0x1000000CL
#define MSG_ProcFilter_keyword_RUNNINGPROCESSMATCHEDLOGGEDRULE_KEYWORD_message 0x1000000DL
#define MSG_ProcFilter_keyword_RUNNINGPROCESSMATCHEDBLOCKEDRULE_KEYWORD_message 0x1000000EL
#define MSG_ProcFilter_keyword_PROCESSTERMINATED_KEYWORD_message 0x10000010L
#define MSG_ProcFilter_keyword_SERVICESTARTED_KEYWORD_message 0x10000011L
#define MSG_ProcFilter_keyword_SERVICESTOPPED_KEYWORD_message 0x10000012L
#define MSG_ProcFilter_keyword_PLUGINLOG_KEYWORD_message 0x10000014L
#define MSG_ProcFilter_Keyword_LOADEDIMAGEMATCHEDBLOCKEDRULE_SYMBOL_message 0x10000015L
#define MSG_ProcFilter_Keyword_LOADEDIMAGEMATCHEDLOGGEDRULE_KEYWORD_message 0x10000016L
#define MSG_ProcFilter_Keyword_WARNING_KEYWORD_message 0x10000017L
#define MSG_ProcFilter_Keyword_NOTICE_KEYWORD_message 0x10000018L
#define MSG_ProcFilter_keyword_PLUGINWARNING_KEYWORD_message 0x10000019L
#define MSG_ProcFilter_Keyword_PLUGINCRITICAL_KEYWORD_message 0x1000001AL
#define MSG_ProcFilter_opcode_MATCH_OPCODE_message 0x3000000AL
#define MSG_ProcFilter_opcode_PERIODICSCANSTARTED_OPCODE_message 0x3000000BL
#define MSG_ProcFilter_opcode_PERIODICSCANFINISHED_OPCODE_message 0x3000000CL
#define MSG_ProcFilter_opcode_EXECUTIONBLOCKED_OPCODE_message 0x3000000DL
#define MSG_ProcFilter_opcode_EXECUTIONLOGGED_OPCODE_message 0x3000000EL
#define MSG_ProcFilter_opcode_FILEQUARANTINED_OPCODE_message 0x3000000FL
#define MSG_ProcFilter_opcode_RULECOMPILATIONFAILED_OPCODE_message 0x30000010L
#define MSG_ProcFilter_opcode_FATALERROR_OPCODE_message 0x30000011L
#define MSG_ProcFilter_opcode_SCANPROCESSFAILED_OPCODE_message 0x30000012L
#define MSG_ProcFilter_opcode_SCANFILEFAILED_OPCODE_message 0x30000013L
#define MSG_ProcFilter_opcode_EXITINGPROCESSSCANMATCHEDBLOCKEDRULE_OPCODE_message 0x30000014L
#define MSG_ProcFilter_opcode_EXITINGPROCESSSCANMATCHEDLOGGEDRULE_OPCODE_message 0x30000015L
#define MSG_ProcFilter_opcode_RUNNINGPROCESSMATCHEDBLOCKEDRULE_OPCODE_message 0x30000016L
#define MSG_ProcFilter_opcode_RUNNINGPROCESSMATCHEDLOGGEDRULE_OPCODE_message 0x30000017L
#define MSG_ProcFilter_opcode_PROCESSTERMINATED_OPCODE_message 0x30000018L
#define MSG_ProcFilter_opcode_SERVICESTARTED_OPCODE_message 0x30000019L
#define MSG_ProcFilter_opcode_SERVICESTOPPED_OPCODE_message 0x3000001AL
#define MSG_ProcFilter_opcode_PLUGINLOG_OPCODE_message 0x3000001BL
#define MSG_ProcFilter_opcode_LoadedImageMatchedBlockedRuleOpcode_message 0x3000001CL
#define MSG_ProcFilter_opcode_LOADEDIMAGEMATCHEDLOGGEDRULE_OPCODE_message 0x3000001DL
#define MSG_ProcFilter_opcode_WARNING_OPCODE_message 0x3000001EL
#define MSG_ProcFilter_opcode_NOTICE_OPCODE_message 0x3000001FL
#define MSG_ProcFilter_opcode_PLUGINWARNING_OPCODE_message 0x30000020L
#define MSG_ProcFilter_opcode_PLUGINCRITICAL_OPCODE_message 0x30000021L
#define MSG_level_Critical                   0x50000001L
#define MSG_level_Error                      0x50000002L
#define MSG_level_Warning                    0x50000003L
#define MSG_level_Informational              0x50000004L
#define MSG_channel_Application              0x90000001L
#define MSG_channel_Security                 0x90000002L
